# -*- coding: utf-8 -*-
"""Q3salsa20.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12knAziVjlyUAnbSIywDXgcPQRwH0aOeF
"""

# -*- coding: utf-8 -*-
"""salsa20_exercise.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VD9CR7D_k91KjkugRyGfVfI0Ezi1JBE0
"""

#!pip install pycryptodome

from Crypto.Cipher import Salsa20
import random

#message = "Two things are infinite: the universe and human stupidity; and I am not sure about the universe."
message = "Kim ne derse desin, mutlu insanın en mutlu anı, uykuya daldığı andır ve mutsuz bir insanın en mutsuz anı, uykudan uyandığı andır. İnsan hayatı, bir tür hata olmalı."
ptext = message.encode('UTF-8')
print("Mesage length in bytes", len(message))
print("Mesage length in bytes", len(ptext))
#ptext = b'Two things are infinite: the universe and human stupidity; and I am not sure about the universe.'

secret = random.randint(0,2**256)
key = secret.to_bytes(32, byteorder='big')
#secret = random.randint(0,2**128)
#key = secret.to_bytes(16, byteorder='big')
print("Key length in bytes", len(key))

cipher = Salsa20.new(key)
ctext = cipher.nonce + cipher.encrypt(ptext)
cipher1 = Salsa20.new(key)
ctext1 = cipher1.nonce + cipher1.encrypt(ptext)

print("plaintext: ", message)
print("ciphertext: ", ctext)
print("ciphertext1: ", ctext1)
print("Ciphertext length in bytes", len(ctext))
print("nonce: ", cipher.nonce)

ctext_nonce = ctext[:8]
ciphertext = ctext[8:]
cipher = Salsa20.new(key, nonce=ctext_nonce)
#cipher = Salsa20.new(key=secret)
dtext = cipher.decrypt(ciphertext)

print("decoded text: ", dtext.decode('UTF-8'))

# Exercise
ctext = b'\xf1\xaa\xa3\xfc\x8b\x87m4\xee\x17\x10\xddE\xcd\xa7\xe7\xcb\xe6\xc5\xd8]\x9c:\xd7\x80\xc4\xa9+\x9c*\xda\x11\x03\x80M\xdf\x98A\x8b\xffvQ\xf27\xded\x9bt\xe1\x11\x81\xfc2\xa0.\x18\xe5w'
secret = 78343975280275134622484075193595221749988821779897394693788715295251789613938
key = secret.to_bytes(32, byteorder='big')

ctext_nonce = ctext[:8]
ciphertext = ctext[8:]
cipher = Salsa20.new(key, nonce=ctext_nonce)
dtext = cipher.decrypt(ciphertext)
print(dtext)

print("decoded text: ", dtext.decode('UTF-8'))

# ctext1
ctext = b"Vbq\x8a\xe3\xb7Rgl-\x14\x8bNS\xeb\x01\xbd\xdf\x1f\x14\x84{\xdanX,\xa5\x98RM\x98\r\xd7\x1e\x9dO\x14\xa7\x8cX\xcb\xad\xf2\xc9\x1f\xc1]\xef\x908I\xe0\xcf\x10%.ulh\xe7\xd6\x9d<\xb9a\xda\xb0\xa2d\xe9\x18\xef9\x99ttP\x9blw\x0e\xe7\xd6\xbb1\xf4?\x16kf\x87\x19\xbe\x94O\xe8\x1d\x08\xe4\xff)\x99']\xda\x191=|H"

print("Mesage length in bytes", len(ctext))

secret = 14656892184006070584
key = secret.to_bytes(32, byteorder='big')

# extract the nonce part from the working cipher
ctext_nonce = ctext[:8]
ciphertext = ctext[8:]

cipher = Salsa20.new(key, nonce=ctext_nonce)
dtext = cipher.decrypt(ciphertext)

print("decoded text: ", dtext.decode('UTF-8'))

# ctext2
ctext2 = b"\eda\x01q+]\x8c\x06[\xa2/\xb8\xcaX\x1f\x8f:\xc97\x0f)\xa5\x84Y\t\xdc\x07\xd2L\xb3V\x14\xad\x8bU\x99\xa3\xf2\x9dK\xc8V\xab\xdd\nS\xe9\xcf\x05$r,\t<\x9e\xd0\x9b<\xbcx\x99\xaf\xed7\xf9\x13\xff9\x88r \\\x9b}>\x1d\xeb"

print("Mesage length in bytes", len(ctext2))

# there are 3 bytes corrupted, missing in the ciphertext2 block
# we extract the first 5 bytes and inject the correct nonce block
ciphertext2 = ctext2[5:]

cipher2 = Salsa20.new(key, nonce=ctext_nonce)
dtext2 = cipher2.decrypt(ciphertext2)

print("decoded text: ", dtext2.decode('UTF-8'))

# ctext3
ctext3 = b"ea,\x14\x88NW\xbfh\xb9\xcdX\x0f\x83}\xc0cX5\xa5\x9e\x1e^\xd0\x03\xc5\x1e\xa3U@\xa1\x85H\xc0"

print("Mesage length in bytes", len(ctext3))

# there are 7 bytes corrupted, missing in the ciphertext3 block
# we extract the first byte and inject the correct nonce block
ciphertext3 = ctext3[1:]

cipher3 = Salsa20.new(key, nonce=ctext_nonce)
dtext3 = cipher3.decrypt(ciphertext3)

print("decoded text: ", dtext3.decode('UTF-8'))